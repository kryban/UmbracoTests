Document Types / Models

https://tcmorris.net/blog/getting-started-with-models-builder/
https://24days.in/umbraco-cms/2016/getting-started-with-modelsbuilder/
LiveModels
DocumentType maakt models aan. 
Initieel in de install folder App_Data/Models/all.generated.cs en models.generated.cs
Runtime gegenereerd indien nieuwe ModelType aangemaakt of bestaande gewijzigd
In web.config setting: <add key="Umbraco.ModelsBuilder.ModelsMode" value="PureLive" />

DLL models
<add key="Umbraco.ModelsBuilder.ModelsMode" value="DLL" /> of LiveDLL
Models worden in een DLL gegenereerd, zodat een referentie naar gelegd kan worden.
gegenereerde DLL: PublishedContentModels.dll
IntelliSense in de View
Models zijn hiermeer ook beschikbaar in custom Controllers

AppData models
<add key="Umbraco.ModelsBuilder.ModelsMode" value="AppData" /> of LiveAppData
Models worden in ~/App_Data/Models gegenereerd
IntelliSense in de View

API models
<add key="Umbraco.ModelsBuilder.ModelsMode" value="Nothing" /> of setting geheel verwijderen
Installeer extensie Modelsbuilder Custom Tools en package umbraco.modelsbuilder.api
Stel Builder in via Tools -> Options -> Umbraco
Creeer lege class en set in properties CustomTool op UmbracoModelsBuilder. Run custom tool
Models worden in legeClass.cs gegenereerd. Vanaf hier uitreidbaar met nieuwe partial class met custom props
IntelliSense in de View

Nadeel: Indien een nieuwe document type is toegevegd, dan moeten worden de Models pas herkend
als ze gegenereerd zijn. Dit moet handmatig gebeuren, waarna opnieuw gebuil en gedployed moet worden
----------------------------------
Talen
Settings --> Languages
Kopieen van vertaalde pagina's. 
In sommige gevallen kan gebruik gemaakt worden van een woordenboek. 
Zoals bijvoorbeeld bij teksten van knoppen. 
In plaats van concrete strings, kan je de waarde uit een e Dictionary halen met: 
 @Umbraco.GetDictionaryValue("Submit")
----------------------------------
Packages: 
Is een manier om plugins te installeren. 

Maar ook een manier om data en functioanliteit tussen twee umbraco installatie te distribueren.
----------------------------------
Macro's
Hergebruik van bestaande functionaliteit. 
Met macros kan functionaliteit gedefinieerd worden, die door content editors naar wens ingezet kunnen worden. 
Kan in een rich text venster aan een page toegevoegd worden.
Twee soorten macros's:
Partial View Macro en XSLT macro. Best practice is om macro's via partial views te gebruiken.

----------------------------------
Datatypes
Kunnen de onderdelen van een document type gedefinieerd worden. 
Zo ook bijvoorbeeld een Rich Text venster, die naar eigen wensen geconfigureerd kan worden
----------------------------------
Full tekst search
Beschikbaar als package. 
Niet uit kunnen testen, omdat versie  niet meer startte na installatie. 

---------------------------------- 
Database:
Connections string vastgelegd in web.config.
Vanuit debug database in ..<Root>\App_Data\Umbraco.sdf
----------------------------------
Dashboard
Is volledig aan te passen.
----------------------------------
Route Hijacking
Met Route Hijacking stuurt Umbraco data niet naar IIS terug, maar naar een zelf gecreerde C# controller.
Hierdoor is het mogelijk om eigen code te runnen voordat een pagina gerendered wordt.
----------------------------------
IPublishedContent 
Interface wat elke content object implementeert.
----------------------------------
Vragen:
- Kan afgedwongen worden dat pages slechts 1x aangemaakt worden?
- Hoe backup te maken?
- Models van metadata voorzien? (Data type checkbox list an, maar anders ?)
- Query van content ?
